package com.trabalho.domain.entity;

import java.util.List;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "TB_FEDERACAO_NACIONAL")
@Data
@AllArgsConstructor
@NoArgsConstructor
public class FederacaoNacionalEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Column(unique = true) 
    private String nome;

    @Column(unique = true) 
    private String paisSede;

    @Column private String email;
    
    @ManyToOne
    @JoinColumn(name = "federacao_continental_id")
    private FederacaoContinentalEntity federacaoContinental;

    @OneToMany(mappedBy = "federacaoNacional")
    private List<ClubeEntity> clubes;

    public FederacaoNacionalEntity(Long id) {
        this.id = id;
    }
}

package com.trabalho.domain.dto;

import java.util.List;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class FederacaoNacionalDTO {
    private Long id;

    @NotNull private String nome;

    @NotNull private String paisSede;

    @NotNull @Email private String email;

    @NotNull private FederacaoContinentalDTO federacaoContinental;

    private List<ClubeDTO> clubes;
}

package com.trabalho.domain.mapping;

import org.mapstruct.Mapper;

import com.trabalho.domain.dto.FederacaoNacionalDTO;
import com.trabalho.domain.entity.FederacaoNacionalEntity;

@Mapper(
    componentModel = "spring",
    uses = {ClubeMapper.class})
public abstract class FederacaoNacionalMapper {
    public abstract FederacaoNacionalEntity toEntity(FederacaoNacionalDTO dto);

    public abstract FederacaoNacionalDTO toDto(FederacaoNacionalEntity entity);
}

package com.trabalho.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.trabalho.domain.entity.FederacaoNacionalEntity;

@Repository
public interface FederacaoNacionalRepository extends JpaRepository<FederacaoNacionalEntity, Long> {
    Optional<FederacaoNacionalEntity> findByFederacaoContinentalId(Long federacaoContinentalId);
}

package com.trabalho.service;

import java.util.List;

import com.trabalho.domain.dto.FederacaoNacionalDTO;

public interface FederacaoNacionalService {
    FederacaoNacionalDTO getByID(Long id);

    FederacaoNacionalDTO getByFederacaoContinental(Long id);

    List<FederacaoNacionalDTO> getAll();

    void save(FederacaoNacionalDTO federacaoNacional);
}

package com.trabalho.service.impl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.trabalho.domain.dto.FederacaoNacionalDTO;
import com.trabalho.domain.mapping.FederacaoNacionalMapper;
import com.trabalho.repository.FederacaoNacionalRepository;
import com.trabalho.service.FederacaoNacionalService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class FederacaoNacionalServiceImpl implements FederacaoNacionalService {
    private final FederacaoNacionalRepository repository;
    private final FederacaoNacionalMapper mapper;

    @Override
    public FederacaoNacionalDTO getByID(Long id) {
        return mapper.toDto(repository.findById(id).orElseThrow());
    }

    @Override
    public FederacaoNacionalDTO getByFederacaoContinental(Long federacaoContinentalId) {
        return mapper.toDto(repository.findByFederacaoContinentalId(federacaoContinentalId).orElseThrow());
    }

    @Override
    public List<FederacaoNacionalDTO> getAll() {
        return repository.findAll().stream().map(mapper::toDto).toList();
    }

    @Override
    public void save(FederacaoNacionalDTO federacaoNacional) {
        repository.save(mapper.toEntity(federacaoNacional));
    }
}

package com.trabalho.controller;

import static com.trabalho.consts.RequestPathConstants.FEDERACAO_NACIONAL;

import com.trabalho.domain.dto.FederacaoNacionalDTO;
import com.trabalho.service.FederacaoNacionalService;
import com.trabalho.util.ControllerUtils;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

@Controller
@RequestMapping(FEDERACAO_NACIONAL)
@RequiredArgsConstructor
@Slf4j
public class FederacaoNacionalController {

    private static final String VIEWS_FOLDER = "federacao_nacional/";

    private final FederacaoNacionalService federacaoNacionalService;

    @GetMapping
    public ModelAndView listAll() {
        var model = new ModelAndView();
        model.setViewName(VIEWS_FOLDER + "lista_federacoes_nacionais");

        List<FederacaoNacionalDTO> federacoes = federacaoNacionalService.getAll();
        model.addObject("federacoes", federacoes);

        return model;
    }

    @GetMapping("/ver/{id}")
    public ModelAndView visualizar(@PathVariable Long id) {
        var model = new ModelAndView();
        model.setViewName(VIEWS_FOLDER + "form_federacao_nacional");

        FederacaoNacionalDTO federacao = federacaoNacionalService.getByID(id);
        model.addObject("federacao", federacao);
        model.addObject("visualizacao", true);

        return model;
    }

    @GetMapping("/editar/{id}")
    public ModelAndView editar(@PathVariable Long id, @RequestParam(required = false) boolean edicao) {
        var model = new ModelAndView();
        model.setViewName(VIEWS_FOLDER + "form_federacao_nacional");

        FederacaoNacionalDTO federacao = federacaoNacionalService.getByID(id);
        model.addObject("federacao", federacao);
        model.addObject("edicao", edicao);

        return model;
    }

    @GetMapping("/cadastrar")
    public ModelAndView cadastrarForm(@RequestParam(required = false) boolean cadastro) {
        var model = new ModelAndView();
        model.setViewName(VIEWS_FOLDER + "form_federacao_nacional");

        model.addObject("federacao", new FederacaoNacionalDTO());
        model.addObject("cadastro", cadastro);

        return model;
    }

    @PostMapping("/cadastrar")
    public ModelAndView save(@Valid FederacaoNacionalDTO federacao, BindingResult bindingResult) {
        var model = new ModelAndView();
        var errors = ControllerUtils.createValidationErrorResponse(bindingResult);

        if (!errors.hasErrors()) {
            federacaoNacionalService.save(federacao);

            if (federacao.getId() == null) {
                model.setViewName("redirect:" + FEDERACAO_NACIONAL + "/cadastrar?cadastro=true");
            } else {
                model.setViewName("redirect:" + FEDERACAO_NACIONAL + "/editar/" + federacao.getId() + "?edicao=true");
            }

            return model;
        }

        model.addObject("errors", errors);
        model.addObject("federacao", federacao);
        model.setViewName(VIEWS_FOLDER + "form_federacao_nacional");

        return model;
    }
}

@import com.trabalho.domain.dto.FederacaoNacionalDTO
@import com.trabalho.domain.dto.FederacaoContinentalDTO
@import com.trabalho.exception.ValidationErrorDTO

@param FederacaoNacionalDTO federacao = new FederacaoNacionalDTO()
@param ValidationErrorDTO errors = new ValidationErrorDTO()
@param boolean cadastro = false
@param boolean edicao = false
@param boolean visualizacao = false

@template.layout.main(logado = true, content = @`

    <button class="btn-cadastrar" onclick="history.back()">Voltar</button>

    <div class="form-container">
        <h2 class="title-page">
            @if(cadastro) Cadastro de Federação Nacional @else if(edicao) Edição de Federação Nacional @else Visualização de Federação Nacional @endif
        </h2>

        <form method="post" action="/federacao-nacional/cadastrar">
            <input type="hidden" name="id" value="${federacao.getId()}"/>

            <label for="nome">Nome:</label>
            <input type="text" id="nome" name="nome" value="${federacao.getNome()}" 
                   @if(visualizacao) readonly @endif>
            @for(var error : errors.getErrorsByField("nome"))
                <div class="error-message">${error.message()}</div>
            @endfor

            <label for="paisSede">País Sede:</label>
            <input type="text" id="paisSede" name="paisSede" value="${federacao.getPaisSede()}" 
                   @if(visualizacao) readonly @endif>
            @for(var error : errors.getErrorsByField("paisSede"))
                <div class="error-message">${error.message()}</div>
            @endfor

            <label for="email">E-mail:</label>
            <input type="email" id="email" name="email" value="${federacao.getEmail()}" 
                   @if(visualizacao) readonly @endif>
            @for(var error : errors.getErrorsByField("email"))
                <div class="error-message">${error.message()}</div>
            @endfor

            <label for="federacaoContinental">Federação Continental:</label>
            <input type="text" id="federacaoContinental" name="federacaoContinental.nome" 
                   value="${federacao.getFederacaoContinental() != null ? federacao.getFederacaoContinental().getNome() : ""}" 
                   @if(visualizacao) readonly @endif>
            @for(var error : errors.getErrorsByField("federacaoContinental"))
                <div class="error-message">${error.message()}</div>
            @endfor

            @if(!visualizacao)
                <button type="submit">
                    @if(cadastro) Cadastrar @else Salvar Alterações @endif
                </button>
            @endif

            @if(cadastro)
                <div class="success-message" style="margin-top:10px;" hidden="${!cadastro}">
                    Federação cadastrada com sucesso!
                </div>
            @endif

            @if(edicao)
                <div class="success-message" style="margin-top:10px;" hidden="${!edicao}">
                    Edição salva com sucesso!
                </div>
            @endif
        </form>
    </div>
`)

@import com.trabalho.domain.dto.FederacaoNacionalDTO
@import java.util.List

@param List<FederacaoNacionalDTO> federacoes
@param boolean logado = true

@template.layout.main(logado = logado, content = @`

    <h2 class="title-page">Federações Nacionais Cadastradas</h2>

    <a href="/federacao-nacional/cadastrar" class="btn-adicionar">Cadastrar Nova Federação</a>

    <table class="tabela">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nome</th>
                <th>País Sede</th>
                <th>Email</th>
                <th>Federação Continental</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @for(var federacao : federacoes)
                <tr>
                    <td>${federacao.getId()}</td>
                    <td>${federacao.getNome()}</td>
                    <td>${federacao.getPaisSede()}</td>
                    <td>${federacao.getEmail()}</td>
                    <td>${federacao.getFederacaoContinental() != null ? federacao.getFederacaoContinental().getNome() : "Não definida"}</td>
                    <td>
                        <a href="/federacao-nacional/ver/${federacao.getId()}" class="btn-ver">Ver</a>
                        <a href="/federacao-nacional/editar/${federacao.getId()}?edicao=true" class="btn-editar">Editar</a>
                    </td>
                </tr>
            @endfor
        </tbody>
    </table>

`)

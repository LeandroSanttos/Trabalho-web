package com.trabalho.domain.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "TB_TREINADOR")
@Data
@AllArgsConstructor
@NoArgsConstructor
public class TreinadorEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Column private String nome;

    @Column private String nacionalidade;

    @Column private String email;

    public TreinadorEntity(Long id) {
        this.id = id;
    }
}

package com.trabalho.domain.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class TreinadorDTO {
    private Long id;

    @NotNull private String nome;

    @NotNull private String nacionalidade;

    @NotNull @Email private String email;
}

package com.trabalho.domain.mapping;

import org.mapstruct.Mapper;

import com.trabalho.domain.dto.TreinadorDTO;
import com.trabalho.domain.entity.TreinadorEntity;

@Mapper(componentModel = "spring")
public abstract class TreinadorMapper {
    public abstract TreinadorEntity toEntity(TreinadorDTO dto);

    public abstract TreinadorDTO toDto(TreinadorEntity entity);
}

package com.trabalho.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.trabalho.domain.entity.TreinadorEntity;

@Repository
public interface TreinadorRepository extends JpaRepository<TreinadorEntity, Long> {
    
}

package com.trabalho.service;

import java.util.List;

import com.trabalho.domain.dto.TreinadorDTO;

public interface TreinadorService {
    TreinadorDTO getById(Long id);

    List<TreinadorDTO> getAll();

    void save(TreinadorDTO treinador);

    void remove(Long id);

}

package com.trabalho.service.impl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.trabalho.domain.dto.TreinadorDTO;
import com.trabalho.domain.mapping.TreinadorMapper;
import com.trabalho.repository.TreinadorRepository;
import com.trabalho.service.TreinadorService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class TreinadorServiceImpl implements TreinadorService {
    private final TreinadorRepository repository;
    private final TreinadorMapper mapper;

    @Override
    public TreinadorDTO getById(Long id) {
        return mapper.toDto(repository.findById(id).orElseThrow());
    }

    @Override
    public List<TreinadorDTO> getAll() {
        return repository.findAll().stream().map(mapper::toDto).toList();
    }

    @Override
    public void save(TreinadorDTO treinador) {
        repository.save(mapper.toEntity(treinador));
    }

    @Override
    public void remove(Long id) {
        repository.deleteById(id);
    }
}

package com.trabalho.controller;

import static com.trabalho.consts.RequestPathConstants.TREINADOR;

import com.trabalho.domain.dto.TreinadorDTO;
import com.trabalho.service.TreinadorService;
import com.trabalho.util.ControllerUtils;

import jakarta.validation.Valid;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

@Controller
@RequestMapping(TREINADOR)
@RequiredArgsConstructor
@Slf4j
public class TreinadorController {

    private static final String VIEWS_FOLDER = "treinador/";

    private final TreinadorService treinadorService;

    @GetMapping
    public ModelAndView listAll() {
        var model = new ModelAndView();
        model.setViewName(VIEWS_FOLDER + "lista_treinadores");

        List<TreinadorDTO> treinadores = treinadorService.getAll();
        model.addObject("treinadores", treinadores);

        return model;
    }

    @GetMapping("/ver/{id}")
    public ModelAndView visualizar(@PathVariable Long id) {
        var model = new ModelAndView();
        model.setViewName(VIEWS_FOLDER + "form_treinador");

        TreinadorDTO treinador = treinadorService.getById(id);
        model.addObject("treinador", treinador);
        model.addObject("visualizacao", true);

        return model;
    }

    @GetMapping("/editar/{id}")
    public ModelAndView editar(@PathVariable Long id, @RequestParam(required = false) boolean edicao) {
        var model = new ModelAndView();
        model.setViewName(VIEWS_FOLDER + "form_treinador");

        TreinadorDTO treinador = treinadorService.getById(id);
        model.addObject("treinador", treinador);
        model.addObject("edicao", edicao);

        return model;
    }

    @GetMapping("/cadastrar")
    public ModelAndView cadastrarForm(@RequestParam(required = false) boolean cadastro) {
        var model = new ModelAndView();
        model.setViewName(VIEWS_FOLDER + "form_treinador");

        model.addObject("treinador", new TreinadorDTO());
        model.addObject("cadastro", cadastro);

        return model;
    }

    @PostMapping("/cadastrar")
    public ModelAndView save(@Valid TreinadorDTO treinador, BindingResult bindingResult) {
        var model = new ModelAndView();
        var errors = ControllerUtils.createValidationErrorResponse(bindingResult);

        if (!errors.hasErrors()) {
            treinadorService.save(treinador);

            if (treinador.getId() == null) {
                model.setViewName("redirect:" + TREINADOR + "/cadastrar?cadastro=true");
            } else {
                model.setViewName("redirect:" + TREINADOR + "/editar/" + treinador.getId() + "?edicao=true");
            }

            return model;
        }

        model.addObject("errors", errors);
        model.addObject("treinador", treinador);
        model.setViewName(VIEWS_FOLDER + "form_treinador");

        return model;
    }
}

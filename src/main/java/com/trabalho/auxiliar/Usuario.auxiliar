package com.trabalho.domain.entity;

import java.util.Set;

import jakarta.persistence.*;
import lombok.*;

@Table(name = "TB_USUARIO")
@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
public class UsuarioEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long Id;

    @Column(nullable = false)
    private String nome;

    @Column(unique = true, nullable = true)
    private String email;

    @Column(nullable = false)
    private String senha;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
            name = "TB_USUARIO_PAPEL",
            joinColumns = @JoinColumn(name = "usuario_id"),
            inverseJoinColumns = @JoinColumn(name = "papel_id")
    )
    private Set<PapelEntity> papeis;

}

package com.trabalho.domain.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class UsuarioDTO {

    @NotNull
    private String nome;

    @NotNull
    @Email
    private String email;

    @NotNull
    @Size(min = 8, max = 20)
    private String senha;

}

package com.trabalho.domain.mapping;

import org.mapstruct.Mapper;
import org.mapstruct.ReportingPolicy;

import com.trabalho.domain.dto.UsuarioDTO;
import com.trabalho.domain.entity.UsuarioEntity;

@Mapper(
    componentModel = "spring",
    unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface UsuarioMapper {
    UsuarioEntity toEntity(UsuarioDTO dto);
}

package com.trabalho.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.trabalho.domain.entity.UsuarioEntity;

import java.util.Optional;

public interface UsuarioRepository extends JpaRepository<UsuarioEntity, Long> {
    boolean existsUsuarioEntityByEmail(String email);

    Optional<UsuarioEntity> findByEmail(String email);
}

package com.trabalho.service;

import com.trabalho.domain.dto.UsuarioDTO;

public interface UsuarioService {
    public void save(UsuarioDTO usuario);
}

package com.trabalho.service.impl;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.trabalho.repository.UsuarioRepository;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class CustomUserDetailService implements UserDetailsService {

    private final UsuarioRepository repository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        var usuario = repository
                .findByEmail(username)
                .orElseThrow(() -> new UsernameNotFoundException("Usuário não encontrado."));

        List<SimpleGrantedAuthority> authorities = usuario
                .getPapeis()
                .stream()
                .map(p -> new SimpleGrantedAuthority(p.getPapel()))
                .toList();

        log.info("Papeis: {}", authorities);
        return new User(usuario.getEmail(), usuario.getSenha(), authorities);

        //return new User(usuario.getEmail(), usuario.getSenha(), List.of(new SimpleGrantedAuthority("USER")));
    }
}

package com.trabalho.service.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import com.trabalho.domain.dto.UsuarioDTO;
import com.trabalho.domain.mapping.UsuarioMapper;
import com.trabalho.exception.RecursoDuplicadoException;
import com.trabalho.repository.PapelRepository;
import com.trabalho.repository.UsuarioRepository;
import com.trabalho.service.UsuarioService;

import java.util.LinkedHashSet;

@Service
@RequiredArgsConstructor
public class UsuarioServiceImpl implements UsuarioService {

    private final UsuarioMapper mapper;
    private final UsuarioRepository repository;
    private final PapelRepository papelRepository;

    @Override
    public void save(UsuarioDTO usuario) {
        var existeEmail = repository.existsUsuarioEntityByEmail(usuario.getEmail());
        if (existeEmail) {
            throw new RecursoDuplicadoException("Email já cadastrado.");
        }

        var entity = mapper.toEntity(usuario);
        entity.setPapeis(new LinkedHashSet<>(papelRepository.findAll()));

        repository.save(entity);
    }
}

